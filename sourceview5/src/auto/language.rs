// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    pub struct Language(Object<ffi::GtkSourceLanguage, ffi::GtkSourceLanguageClass>);

    match fn {
        get_type => || ffi::gtk_source_language_get_type(),
    }
}

impl Language {
    #[doc(alias = "gtk_source_language_get_globs")]
    pub fn get_globs(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::gtk_source_language_get_globs(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gtk_source_language_get_hidden")]
    pub fn get_hidden(&self) -> bool {
        unsafe { from_glib(ffi::gtk_source_language_get_hidden(self.to_glib_none().0)) }
    }

    #[doc(alias = "gtk_source_language_get_id")]
    pub fn get_id(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::gtk_source_language_get_id(self.to_glib_none().0)) }
    }

    #[doc(alias = "gtk_source_language_get_metadata")]
    pub fn get_metadata(&self, name: &str) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gtk_source_language_get_metadata(
                self.to_glib_none().0,
                name.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gtk_source_language_get_mime_types")]
    pub fn get_mime_types(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::gtk_source_language_get_mime_types(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gtk_source_language_get_name")]
    pub fn get_name(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::gtk_source_language_get_name(self.to_glib_none().0)) }
    }

    #[doc(alias = "gtk_source_language_get_section")]
    pub fn get_section(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::gtk_source_language_get_section(self.to_glib_none().0)) }
    }

    #[doc(alias = "gtk_source_language_get_style_fallback")]
    pub fn get_style_fallback(&self, style_id: &str) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gtk_source_language_get_style_fallback(
                self.to_glib_none().0,
                style_id.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gtk_source_language_get_style_ids")]
    pub fn get_style_ids(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::gtk_source_language_get_style_ids(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gtk_source_language_get_style_name")]
    pub fn get_style_name(&self, style_id: &str) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gtk_source_language_get_style_name(
                self.to_glib_none().0,
                style_id.to_glib_none().0,
            ))
        }
    }

    pub fn connect_property_hidden_notify<F: Fn(&Language) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_hidden_trampoline<F: Fn(&Language) + 'static>(
            this: *mut ffi::GtkSourceLanguage,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::hidden\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_hidden_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_id_notify<F: Fn(&Language) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_id_trampoline<F: Fn(&Language) + 'static>(
            this: *mut ffi::GtkSourceLanguage,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_id_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_name_notify<F: Fn(&Language) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<F: Fn(&Language) + 'static>(
            this: *mut ffi::GtkSourceLanguage,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_name_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_section_notify<F: Fn(&Language) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_section_trampoline<F: Fn(&Language) + 'static>(
            this: *mut ffi::GtkSourceLanguage,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::section\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_section_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Language {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Language")
    }
}
