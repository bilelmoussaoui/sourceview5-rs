// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use bitflags::bitflags;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::FromValueOptional;
use glib::value::SetValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

bitflags! {
    pub struct FileSaverFlags: u32 {
        const NONE = 0;
        const IGNORE_INVALID_CHARS = 1;
        const IGNORE_MODIFICATION_TIME = 2;
        const CREATE_BACKUP = 4;
    }
}

impl fmt::Display for FileSaverFlags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl ToGlib for FileSaverFlags {
    type GlibType = ffi::GtkSourceFileSaverFlags;

    fn to_glib(&self) -> ffi::GtkSourceFileSaverFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GtkSourceFileSaverFlags> for FileSaverFlags {
    unsafe fn from_glib(value: ffi::GtkSourceFileSaverFlags) -> FileSaverFlags {
        skip_assert_initialized!();
        FileSaverFlags::from_bits_truncate(value)
    }
}

impl StaticType for FileSaverFlags {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gtk_source_file_saver_flags_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for FileSaverFlags {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for FileSaverFlags {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for FileSaverFlags {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

bitflags! {
    pub struct SortFlags: u32 {
        const NONE = 0;
        const CASE_SENSITIVE = 1;
        const REVERSE_ORDER = 2;
        const REMOVE_DUPLICATES = 4;
    }
}

impl fmt::Display for SortFlags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl ToGlib for SortFlags {
    type GlibType = ffi::GtkSourceSortFlags;

    fn to_glib(&self) -> ffi::GtkSourceSortFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GtkSourceSortFlags> for SortFlags {
    unsafe fn from_glib(value: ffi::GtkSourceSortFlags) -> SortFlags {
        skip_assert_initialized!();
        SortFlags::from_bits_truncate(value)
    }
}

impl StaticType for SortFlags {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gtk_source_sort_flags_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for SortFlags {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for SortFlags {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for SortFlags {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

bitflags! {
    pub struct SpaceLocationFlags: u32 {
        const NONE = 0;
        const LEADING = 1;
        const INSIDE_TEXT = 2;
        const TRAILING = 4;
        const ALL = 7;
    }
}

impl fmt::Display for SpaceLocationFlags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl ToGlib for SpaceLocationFlags {
    type GlibType = ffi::GtkSourceSpaceLocationFlags;

    fn to_glib(&self) -> ffi::GtkSourceSpaceLocationFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GtkSourceSpaceLocationFlags> for SpaceLocationFlags {
    unsafe fn from_glib(value: ffi::GtkSourceSpaceLocationFlags) -> SpaceLocationFlags {
        skip_assert_initialized!();
        SpaceLocationFlags::from_bits_truncate(value)
    }
}

impl StaticType for SpaceLocationFlags {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gtk_source_space_location_flags_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for SpaceLocationFlags {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for SpaceLocationFlags {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for SpaceLocationFlags {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

bitflags! {
    pub struct SpaceTypeFlags: u32 {
        const NONE = 0;
        const SPACE = 1;
        const TAB = 2;
        const NEWLINE = 4;
        const NBSP = 8;
        const ALL = 15;
    }
}

impl fmt::Display for SpaceTypeFlags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl ToGlib for SpaceTypeFlags {
    type GlibType = ffi::GtkSourceSpaceTypeFlags;

    fn to_glib(&self) -> ffi::GtkSourceSpaceTypeFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GtkSourceSpaceTypeFlags> for SpaceTypeFlags {
    unsafe fn from_glib(value: ffi::GtkSourceSpaceTypeFlags) -> SpaceTypeFlags {
        skip_assert_initialized!();
        SpaceTypeFlags::from_bits_truncate(value)
    }
}

impl StaticType for SpaceTypeFlags {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gtk_source_space_type_flags_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for SpaceTypeFlags {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for SpaceTypeFlags {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for SpaceTypeFlags {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}
