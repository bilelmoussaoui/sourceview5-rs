// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::HoverProvider;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    pub struct Hover(Object<ffi::GtkSourceHover, ffi::GtkSourceHoverClass>);

    match fn {
        get_type => || ffi::gtk_source_hover_get_type(),
    }
}

impl Hover {
    #[doc(alias = "gtk_source_hover_add_provider")]
    pub fn add_provider<P: IsA<HoverProvider>>(&self, provider: &P) {
        unsafe {
            ffi::gtk_source_hover_add_provider(
                self.to_glib_none().0,
                provider.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "gtk_source_hover_remove_provider")]
    pub fn remove_provider<P: IsA<HoverProvider>>(&self, provider: &P) {
        unsafe {
            ffi::gtk_source_hover_remove_provider(
                self.to_glib_none().0,
                provider.as_ref().to_glib_none().0,
            );
        }
    }

    pub fn get_property_hover_delay(&self) -> u32 {
        unsafe {
            let mut value = glib::Value::from_type(<u32 as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(
                self.as_ptr() as *mut glib::gobject_ffi::GObject,
                b"hover-delay\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `hover-delay` getter")
                .unwrap()
        }
    }

    pub fn set_property_hover_delay(&self, hover_delay: u32) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.as_ptr() as *mut glib::gobject_ffi::GObject,
                b"hover-delay\0".as_ptr() as *const _,
                glib::Value::from(&hover_delay).to_glib_none().0,
            );
        }
    }

    pub fn connect_property_hover_delay_notify<F: Fn(&Hover) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_hover_delay_trampoline<F: Fn(&Hover) + 'static>(
            this: *mut ffi::GtkSourceHover,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::hover-delay\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_hover_delay_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

#[derive(Clone, Default)]
pub struct HoverBuilder {
    hover_delay: Option<u32>,
}

impl HoverBuilder {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn build(self) -> Hover {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
        if let Some(ref hover_delay) = self.hover_delay {
            properties.push(("hover-delay", hover_delay));
        }
        let ret = glib::Object::new::<Hover>(&properties).expect("object new");
        ret
    }

    pub fn hover_delay(mut self, hover_delay: u32) -> Self {
        self.hover_delay = Some(hover_delay);
        self
    }
}

impl fmt::Display for Hover {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Hover")
    }
}
