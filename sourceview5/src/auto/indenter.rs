// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::View;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    pub struct Indenter(Interface<ffi::GtkSourceIndenter, ffi::GtkSourceIndenterInterface>);

    match fn {
        get_type => || ffi::gtk_source_indenter_get_type(),
    }
}

pub const NONE_INDENTER: Option<&Indenter> = None;

pub trait IndenterExt: 'static {
    //#[doc(alias = "gtk_source_indenter_indent")]
    //fn indent<P: IsA<View>>(&self, view: &P, iter: /*Unimplemented*/gtk::TextIter);

    #[doc(alias = "gtk_source_indenter_is_trigger")]
    fn is_trigger<P: IsA<View>>(
        &self,
        view: &P,
        location: &gtk::TextIter,
        state: gdk::ModifierType,
        keyval: u32,
    ) -> bool;
}

impl<O: IsA<Indenter>> IndenterExt for O {
    //fn indent<P: IsA<View>>(&self, view: &P, iter: /*Unimplemented*/gtk::TextIter) {
    //    unsafe { TODO: call ffi:gtk_source_indenter_indent() }
    //}

    fn is_trigger<P: IsA<View>>(
        &self,
        view: &P,
        location: &gtk::TextIter,
        state: gdk::ModifierType,
        keyval: u32,
    ) -> bool {
        unsafe {
            from_glib(ffi::gtk_source_indenter_is_trigger(
                self.as_ref().to_glib_none().0,
                view.as_ref().to_glib_none().0,
                location.to_glib_none().0,
                state.to_glib(),
                keyval,
            ))
        }
    }
}

impl fmt::Display for Indenter {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Indenter")
    }
}
